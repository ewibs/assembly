import { format } from 'prettier';
import parserCss from 'prettier/parser-postcss';

import { IBundleContext } from './compile';
import { ModuleMap } from './module-map';
import { normalizeCSS } from './normalize';

export class CompilerStyleSheet extends ModuleMap<Partial<CSSStyleDeclaration>> {

  constructor(public readonly context: IBundleContext) { super(); }

  parser = 'css';

  renderModule(content: Partial<CSSStyleDeclaration>, module: string): string {
    if (Object.values(content).filter(v => !!v).length == 0) { return ''; }
    return `
      ${module} {
        ${Object.entries(content)
        .filter(([prop, value]) => !!prop && !!value)
        .map(([prop, value]) => {
          let regex = /[a-z][A-Z]/g;
          let tries = 0;
          while (regex.test(prop) && ++tries < 10) {
            let index = regex.lastIndex - 1;
            prop = prop.substring(0, index) + '-' + prop.substring(index);
          }
          return `${prop.toLowerCase()}: ${value};`;
        }).join('\n')
      }
      }
    `
  }

  wrap(renderedContent: string): string {
    return `
      /* Generated by ewibs: http://ewibs.app */
      ${renderedContent}
    `;
  }

  // TODO: This should probably not exist
  private unwrap(renderedContent: string): string {
    return renderedContent.replace('/* Generated by ewibs: http://ewibs.app */', '');
  }

  override renderGlobal(): string {
    const base = this.wrap(`
      ${this.renderModule(this.context.assembly.settings.globalStyle.styles, 'body, html')}
      ${this.unwrap(super.renderGlobal())}
    `);
    if (this.context.assembly.settings.globalStyle.normalize) {
      return format(`
        ${normalizeCSS}
        ${base}
      `, { parser: this.parser, plugins: [parserCss] });
    }
    return base;
  }

}